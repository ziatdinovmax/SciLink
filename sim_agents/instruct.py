INITIAL_PROMPT_TEMPLATE = """
User request: "{description}"

Your task is to:
1. Parse the user request to understand the desired atomic structure (material, phase, defects, surface, etc.).
2. Generate a *complete* and *executable* Python script using the Atomic Simulation Environment (ASE) library to create this structure.
3. The script MUST include necessary imports (e.g., `from ase import Atoms`, `from ase.build import ...`, `from ase.io import write`).
4. The script MUST define or load the base structure correctly (e.g., using `bulk`, `surface`, `molecule`, or reading a file if appropriate).
5. The script MUST perform any requested modifications (e.g., creating vacancies, substituting atoms, adding adsorbates, applying strain). Use standard ASE functionalities.
6. The script MUST save the final `Atoms` object to a file (e.g., 'structure.xyz', 'POSCAR', 'structure.cif'). Choose a suitable, simple filename.
7. CRITICALLY: Immediately after successfully saving the file, the script MUST print *exactly* this confirmation line to standard output: `STRUCTURE_SAVED:<filename.ext>` (replace `<filename.ext>` with the actual filename used). No other output should precede or follow this specific line unless it's part of error handling.
8. Ensure the script handles potential issues gracefully if possible (e.g., checks for valid indices if modifying atoms).
9. Call the '{tool_name}' function/tool with the *entire generated Python script content* as the 'script_content' argument. Do not add any explanatory text before or after the function call itself in your response.
"""

CORRECTION_PROMPT_TEMPLATE = """
The user's original request was: "{original_request}"

You previously generated the following Python ASE script:
```python
{failed_script}
However, executing this script failed with the following error (traceback included):
{error_message}
Your task is to:

Analyze the error message (especially the traceback) and the failed script provided above.
Identify the specific bug or issue in the script that caused the error. Common issues include incorrect imports, wrong function arguments, index errors, undefined variables, or logical errors in structure manipulation.
Generate a corrected, complete, and executable Python ASE script that fulfills the original request ("{original_request}") and specifically avoids the previous error.
The corrected script MUST still include all necessary imports, structure definition/modification, saving the file with ase.io.write(), and printing the exact confirmation line 'STRUCTURE_SAVED:<filename.ext>' upon successful saving. Use a simple filename.
Call the '{tool_name}' function/tool again, providing the entire corrected Python script content as the 'script_content' argument. Do not add explanatory text around the function call itself. 
"""


VALIDATOR_PROMPT_TEMPLATE = """
You are an expert materials scientist and computational modeling specialist.
Your task is to critically review an unrelaxed atomic structure generated by an ASE (Atomic Simulation Environment) Python script. 
This structure is intended as an initial input for subsequent Density Functional Theory relaxation calculations.

**Input Provided to You:**
1.  **Original User Request for Structure:** A description of the desired atomic structure (e.g., material, phase, defects, surface).
    Example: "{original_request}"
2.  **Generating ASE Script Content:** The Python script that was used to create the structure.
    Example:
    ```python
    {generating_script_content}
    ```
3.  **Path to Generated Structure File:** The path to the file (e.g., POSCAR, XYZ) produced by the script. You should assume the structure from this file has been loaded and is being analyzed.
    Example: "{structure_file_path}"

**Your Task & Output Format:**

Based on all the provided information, you MUST output a valid JSON object with the following keys:

1.  `"overall_assessment"`: (String) A brief (2-3 sentences) overall assessment of the generated structure's suitability as a starting point for DFT relaxation, its adherence to the original request, and its fundamental physical/chemical soundness.
2.  `"identified_issues_detail"`: (List of Strings) A list of ALL specific issues you identified that would make it a poor input for DFT or that deviate from the user's request. This includes:
    * Discrepancies from the "Original User Request" (e.g., wrong phase, wrong defect type and placement).
    * Gross physical or chemical unreasonableness (e.g., severe atomic clashes that relaxation might not fix, fundamentally wrong bonding indicative of incorrect script logic).
    * Stoichiometry errors if the request implied a specific composition.
    * For slabs/surfaces: clearly insufficient vacuum that would lead to self-interaction in DFT.
    If no such critical issues are found, this should be an empty list. (Minor deviations in bond lengths/angles that relaxation would fix are not primary issues here unless they indicate a fundamental script error).
3.  `"script_modification_hints"`: (List of Strings) Actionable suggestions on how the *provided ASE script* could be modified to address the identified critical issues and better match the original request for an initial DFT input structure. These hints should be targeted at improving the script's logic for structure *generation*, ASE function calls, or parameters. If the structure is a good starting point, provide an empty list.

Ensure your output is ONLY the valid JSON object described above. Do not include any other text, explanations, or markdown formatting outside the JSON structure.
"""


SCRIPT_CORRECTION_FROM_VALIDATION_TEMPLATE = """
The user's original request for an atomic structure was: "{original_request}"

A previous attempt to generate an ASE script for this request was made.
- **Previously Attempted Script:**
  ```python
  {attempted_script_content}
  ```
- **Validation Feedback on the Structure Produced by the Above Script:**
  - **Overall Assessment by Validator:** {validator_overall_assessment}
  - **Specific Issues Identified by Validator:**
    {validator_specific_issues}
  - **Validator's Hints for Modifying the Script:**
    {validator_script_hints}

Your task is to generate a **new, corrected, complete, and executable Python ASE script** that:
1.  Precisely fulfills the original user request: "{original_request}".
2.  Directly addresses all "Specific Issues Identified by Validator".
3.  Intelligently incorporates the "Validator's Hints for Modifying the Script". If hints conflict or are unclear, prioritize fulfilling the original request and fixing issues.
4.  The script MUST include all necessary imports (e.g., `from ase import Atoms`, `from ase.build import ...`, `from ase.io import write`).
5.  The script MUST save the final `Atoms` object to a file (e.g., 'structure.xyz', 'POSCAR'). Choose a suitable, simple filename.
6.  CRITICALLY: Immediately after successfully saving the file, the script MUST print *exactly* this confirmation line to standard output: `STRUCTURE_SAVED:<filename.ext>` (replace `<filename.ext>` with the actual filename used).
7.  Call the '{tool_name}' function/tool with the *entire new corrected Python script content* as the 'script_content' argument. Do not add any explanatory text before or after the function call itself in your response.
"""